import { Button, Form, Input, Upload, message } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import { useState } from 'react';
import { uploadFileToIPFS, uploadMetadataToIPFS } from '../services/apiPinata';
import { useAccount, usePublicClient, useWriteContract } from 'wagmi';
import NFTCollection from '../abis/NFTCollection.json';
import MarketPlace from '../abis/Marketplace.json';

interface MintFormProps {
  onSuccess?: () => void; // Add callback for successful minting
}

export const MintForm = ({ onSuccess }: MintFormProps) => {
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const { address, isConnected } = useAccount();
  const { writeContractAsync } = useWriteContract();
  const publicClient = usePublicClient();
  const [form] = Form.useForm(); // Get form instance to reset it after submission

  const handleFinish = async (values: any) => {
    if (!isConnected || !address) return message.error('Vui l√≤ng k·∫øt n·ªëi v√≠!');
    if (!file) return message.error('Vui l√≤ng upload ·∫£nh!');

    try {
      setLoading(true);
      message.loading('ƒêang upload ·∫£nh l√™n IPFS...');

      // 1. Upload ·∫£nh
      const imageURL = await uploadFileToIPFS(file);

      // 2. T·∫°o metadata
      const metadata = {
        name: values.name,
        description: values.description,
        image: imageURL
      };

      // 3. Upload metadata
      message.loading('ƒêang upload metadata l√™n IPFS...');
      const tokenURI = await uploadMetadataToIPFS(metadata);

      // 4. G·ªçi mintNFT tr√™n smart contract
      message.loading('ƒêang g·ªçi mintNFT tr√™n smart contract...');
      const mintTxHash = await writeContractAsync({
        address: import.meta.env.VITE_NFT_CONTRACT_ADDRESS as `0x${string}`,
        abi: NFTCollection,
        functionName: 'mintNFT',
        args: [address, tokenURI]
      });

      // Ch·ªù giao d·ªãch ho√†n t·∫•t v√† l·∫•y tokenId
      message.loading('ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...');
      const receipt = await publicClient.waitForTransactionReceipt({ hash: mintTxHash });

      // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
      if (receipt.status !== 'success') {
        console.error('Transaction receipt:', receipt);
        throw new Error(`Giao d·ªãch mintNFT th·∫•t b·∫°i: ${receipt.status}`);
      }

      // Debug: Ghi log giao d·ªãch
      console.log('Transaction receipt:', receipt);
      console.log('Transaction logs:', receipt.logs);

      // L·∫•y tokenId t·ª´ gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa mintNFT
      const transferEvent = receipt.logs.find(
        (log) => log.topics[0] === '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' // Transfer event
      );
      let tokenId;
      if (transferEvent) {
        tokenId = BigInt(transferEvent.topics[3]).toString();
        console.log('Minted NFT token ID:', tokenId);
      } else {
        throw new Error('Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán Transfer. Vui l√≤ng ki·ªÉm tra contract.');
      }

      message.success('Mint NFT th√†nh c√¥ng üéâ');

      // 5. Li·ªát k√™ NFT tr√™n Marketplace
      message.loading('ƒêang li·ªát k√™ NFT tr√™n marketplace...');

      // Approve Marketplace
      const approveTxHash = await writeContractAsync({
        address: import.meta.env.VITE_NFT_CONTRACT_ADDRESS as `0x${string}`,
        abi: NFTCollection,
        functionName: 'approve',
        args: [import.meta.env.VITE_MARKETPLACE_ADDRESS, tokenId]
      });

      // Wait for approval transaction
      await publicClient.waitForTransactionReceipt({ hash: approveTxHash });

      // Li·ªát k√™ NFT v·ªõi gi√° 0.01 ETH
      const price = BigInt(0.01 * 10 ** 18);
      const listTxHash = await writeContractAsync({
        address: import.meta.env.VITE_MARKETPLACE_ADDRESS as `0x${string}`,
        abi: MarketPlace,
        functionName: 'listNFT',
        args: [import.meta.env.VITE_NFT_CONTRACT_ADDRESS, tokenId, price]
      });

      // Wait for listing transaction
      await publicClient.waitForTransactionReceipt({ hash: listTxHash });

      message.success('NFT ƒë√£ ƒë∆∞·ª£c li·ªát k√™ tr√™n marketplace üéâ');

      // Reset form after successful submission
      form.resetFields();
      setFile(null);

      // Call onSuccess callback to refresh NFT list
      if (onSuccess) {
        console.log('Mint successful, triggering refresh');
        onSuccess();
      }
    } catch (err: any) {
      console.error('L·ªói:', err);
      message.error(`Thao t√°c th·∫•t b·∫°i: ${err.message || err}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Form form={form} layout="vertical" onFinish={handleFinish}>
      <Form.Item label="T√™n NFT" name="name" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n NFT' }]}>
        <Input />
      </Form.Item>
      <Form.Item label="M√¥ t·∫£" name="description" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' }]}>
        <Input.TextArea rows={3} />
      </Form.Item>
      <Form.Item label="Upload ·∫£nh" rules={[{ required: true, message: 'Vui l√≤ng upload ·∫£nh' }]}>
        <Upload
          beforeUpload={(file) => {
            setFile(file);
            return false;
          }}
          maxCount={1}
          fileList={file ? ([file] as any) : []}
          onRemove={() => setFile(null)}
        >
          <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh</Button>
        </Upload>
      </Form.Item>
      <Button type="primary" htmlType="submit" loading={loading} disabled={!isConnected}>
        Mint v√† List NFT
      </Button>
    </Form>
  );
};
